---
title: API Reference

language_tabs:
  - shell
  - php

toc_footers:
 - <a href='mailto:support@wheniwork.com?subject=Developer Key&body=I would like to request a developer key.%0D%0A%0D%0AName:%0D%0AApp Name:%0D%0AEmail:%0D%0A'>Sign Up for a Developer Key</a>
 - <a href='http://wheniwork.com'>Powered by When I Work</a>
---

# Introduction

The When I Work API is thorough, flexible, and restful. Its methods are logically grouped and follow standard conventions. Make a selection from the left to jump to the method group you would like to know more about.

Feel free to [contact us](http://support.wheniwork.com) if something seems out of place.

## Libraries

We currently offer the following API wrappers:

* PHP: <a target="_blank" href="https://github.com/dolfelt/wheniwork-api-php">wheniwork-api-php</a>


# Authentication

Authentication with When I Work is based on a token model. You first authenticate using a private developer key and the username and password of a When I Work user. Your developer key can be used like the following in the headers. See the [Login](#login) endpoint for more details.

`W-Key: <%=@wiw_key%>`

Authenticating will return back a login object containing a token that is used to authenticate all future requests. The token may be included in the headers, as a cookie, or in the query string, using the key `W-Token`. For example, you might include the following as a header for your request:

`W-Token: <%=@wiw_token%>`

Authenticating will also return back a list of [User](#users) objects, each of which is associated with a When I Work account. In order to specify which [Account](#accounts) you are making requests to, API requests must provide a When I Work user id through the `W-UserId` header. For example, to make requests on behalf of the When I Work user with id 5, you would include the following header in your request:

`W-UserId: 5`

## Login

> Example Request

```shell
curl <%=@api_prefix%>/2/login \
  --data '{"username":"user@example.com", "password": "*******"}' \
  -H "W-Key: <%=@wiw_key%>"
```
```php
<?php
$result = Wheniwork::login(
    "<%=@wiw_key%>",
    "user@example.com",
    "*******"
);
?>
```

> Example Response

<% json do %>
{
  "login": <%= print_json(data.objects['login']) %>,
  "users": [
    <%= print_json(data.objects['user'], :include => {
      'login_id' => data.objects['login']['id']['value'],
      'account_id' => data.objects['account']['id']['value']
    }) %>,
    <%= print_json(data.objects['user'], :include => {
      'id' => 5475,
      'login_id' => data.objects['login']['id']['value'],
      'account_id' => 12345
    }) %>
  ],
  "accounts": [
    <%= print_json(data.objects['account'], :exclude => [
      'type',
      'subdomain',
      'enabled'
    ]) %>,
    <%= print_json(data.objects['account'], :exclude => [
      'type',
      'subdomain',
      'enabled'
    ], :include => {
      'id' => 12345,
      'company' => '123 Company'
    }) %>
  ]
}
<% end %>

>> Be sure to replace `<%=@wiw_key%>` with your requested Developer Key.

The first thing to do after you receive your Developer Key is to login to get your token. After receiving your token, you will make all future requests using your token in the header of the request.

Once you have the token, you must include it in all authenticated requests.

In addition to the login object, this endpoint returns all [User](#users) objects associated with the login, and all [Account](#accounts) objects associated with those users.

<% aside do %>
  Remember â€” All post bodies must be JSON encoded data (no form data).
<% end %>

### HTTP Request
`POST <%=@api_prefix%>/2/login`

You must include your Developer Key in the `W-Key` header, like so:

`W-Key: <%=@wiw_key%>`

### Parameters

Key | Description
--------- | -----------
<% param "username", "string (email address)" do %>The email of the user logging in.<% end %>
<% param "password", "string" do %>The password of the user logging in.<% end %>
<% param "key", "string" do %>Your developer key. This can be used instead of `W-Key` in the headers. You do not need both.<% end %>

<% aside do %>
  For legacy reasons, there are tokens in both the `"login"` and `"users"` objects. For all new development projects, the token in the `"login"` object of the response should be used.
<% end %>


## Register

> Example Request

```shell
curl --request POST \
--url <%=@api_prefix%>/2/login/register \
--header 'W-Token: <%=@wiw_token%>' \
--data '{"first_name": "Goldie", "last_name": "Wilson", "email": "goldiewilson@hillvalleygov.org", "password": "*******", "password_confirm": "*******", "phone_number": "555-555-5555", "subdomain": "abc-company"}'
```
```php
<?php
$wiw = new Wheniwork('ilovemyboss');
$result = $wiw->post('login/register', [
    'first_name' => 'Goldie',
    'last_name' => 'Wilson',
    'email' => 'goldiewilson@hillvalleycalifornia.gov',
    'password' => 'examplepassword',
    'password_confirm' => 'examplepassword',
    'phone_number' => '555-555-5555',
    'subdomain' => 'abc-company'
]);
?>
```

> Example Response

<% json do %>
{
  "login": <%= print_json(data.objects['login']) %>,
  "user": <%= print_json(data.objects['user'], :include => {
    "login_id" => data.objects['login']['id']['value']
  }) %>
}
<% end %>

>> Be sure to replace `<%=@wiw_key%>` with your requested Developer Key.

This endpoint allows you to create new users and associate them with an account.

### HTTP Request

`POST <%=@api_prefix%>/2/login/register`

### Parameters

Key | Description
--------- | -----------
<% param "first_name", "string" do %>The first name of this user.<% end %>
<% param "last_name", "string" do %>  The last name of this user.<%end%>
<% param "phone_number", "string" do %>  The phone number of this user.<%end%>
<% param "email", "string" do %>  The email address of this user.<%end%>
<% param "password", "string" do %> The password of this user.<%end%>
<% param "password_confirm", "string" do %> The password of this user.<%end%>
<% param "subdomain", "string" do %> The subdomain of this user.<%end%>
<% param "account_id", "string(optional)" do %> The account id of this user.<%end%>

Please note that all passwords must be:

- at least 10 characters long
- may not contain the email address
- must have reasonable variation (eg. `aaaaaaaaaa` is not allowed)
- must not be a dictionary word

## Find Account

> Example Request

```shell
curl <%=@api_prefix%>/2/login/find?q=when \
 -H "W-Token: <%=@wiw_token%>"
```
```php
<?php
$wiw = new Wheniwork("<%=@wiw_token%>");
$result = $wiw->get("login/find?q=when");
?>
```

> Example Response

<% json do %>
{
  "accounts": [
    <%= print_json(data.objects['account_search_result'], :include => {
      'id' => 11,
      'company' => 'When I Work',
      'subdomain' => 'wheniwork',
      'account_holder' => 'Randy Olson',
      'type' => 3,
      'registered' => false,
      'place' => data.objects['place']
    }) %>,
    <%= print_json(data.objects['account_search_result'], :include => {
      'id' => 17,
      'company' => 'When Bagels Met Donuts',
      'subdomain' => 'bagelsdonuts',
      'account_holder' => 'Jimmy Baker',
      'type' => 3
    }) %>
  ]
}
<% end %>

In order to find accounts that a user has joined or may want to join, you can use the `login/find` endpoint.

The results returned may include expired accounts.

A maximum of 100 results will be returned and there is no pagination support.

### HTTP Request

`GET <%=@api_prefix%>/2/login/find`

### Parameters

Key | Description
--------- | -----------
<% param "q", "string" do %>A search term to match against the company name or address.<% end %>
<% param "places", "boolean" do %> Also search for matching Google Places.<%end%>
<% param "place_id", "string array" do %> Look for specific Google Places that match accounts or locations in accounts.<%end%>

Either `place_id` or `q` is required. If `places` is enabled, the search term `q` will also be matched against place names and addresses.


## Web App SSO

> Example Request

```shell
curl -X POST <%=@api_prefix%>/2/users/autologin \
 -H "W-Token: <%=@wiw_token%>"
```
```php
<?php
$wiw = new Wheniwork("<%=@wiw_token%>");
$result = $wiw->post("users/autologin");
?>
```

> Example Response

<% json do %>
{
  "user": <%= print_json(data.objects['user'], :include=>{
    :token=>@wiw_token
  }) %>,
  "hash": "the_auto_login_hash"
}
<% end %>

If you find any need to send an authenticated user into the web app without requiring them to log in, you can generate a unique hash that will log them into the app automatically.

You can then use the `al` (autologin) query parameter to accomplish this. An example would be sending the user to the following URL:

`http://app.wheniwork.com/scheduler?al={the_auto_login_hash}`

### HTTP Request

`POST <%=@api_prefix%>/2/users/autologin`

## Related Objects

> Examples

```shell
curl <%=@api_prefix%>/2/shifts?include_objects=true
```
```shell
curl <%=@api_prefix%>/2/shifts?include_objects=false
```
```shell
curl <%=@api_prefix%>/2/shifts?include_objects=users
```
```shell
curl <%=@api_prefix%>/2/shifts?include_objects=positions,locations
```
```shell
curl <%=@api_prefix%>/2/shifts?include_objects[]=positions&include_objects[]=locations
```

By default, all responses from the API will include related objects. For example, when calling the `shifts` endpoint, the response will also include a `users` array with all the employees for those shifts.

Including related objects is controlled by the `include_objects` parameter, which can either be boolean, a comma-separated list, or an array. Boolean values are recognized as `true`, `yes`, `on`, and `1` and the inverse of each. To completely disable the inclusion of related objects, use `false`.

<% aside do %>
  The default value for `include_objects` is `true`.
<% end %>

# Shifts

<%= partial "methods/shifts" %>

# Schedule

<%= partial "methods/schedule" %>

# Accounts

<%= partial "methods/accounts" %>

# Login

<%= partial "methods/login" %>

# Users

<%= partial "methods/users" %>

# Positions

<%= partial "methods/positions" %>

# Locations

<%= partial "methods/locations" %>

# Sites

<%= partial "methods/sites" %>

# Blocks

<%= partial "methods/blocks" %>

# Requests

<%= partial "methods/requests" %>

# Swaps

<%= partial "methods/swaps" %>

# Availabilities

<%= partial "methods/availabilities" %>

# Payrolls

<%= partial "methods/payrolls" %>

# Times

<%= partial "methods/times" %>

# Batch

<%= partial "methods/batch" %>

# Messages

<%= partial "methods/messages" %>

# Send

<%= partial "methods/send" %>

# Templates

<%= partial "methods/templates" %>

# Plans

<%= partial "methods/plans" %>

# Annotations

<%= partial "methods/annotations" %>

# Devices

<%= partial "methods/devices" %>

# Industries

<%= partial "methods/industries" %>

# Timezones

<%= partial "methods/timezones" %>

# Errors

When I Work uses the following error codes:


Error Code | Meaning
---------- | -------
400 | Bad Request -- The request is not valid
401 | Unauthorized -- The API key is wrong or the query is misplaced
403 | Forbidden -- The request is below the required permission level
404 | Not Found -- The specified request could not be found
405 | Method Not Allowed -- You tried to access a user with an invalid method
406 | Not Acceptable -- You requested a format that isn't JSON
410 | Gone -- The user requested has been removed
418 | An undefined error occurred
429 | Too Many Requests -- The server is not able to address the number of queries
500 | Internal Server Error -- An internal server error occurred
503 | Service Unavailable -- The service is temporarily offline for maintenance

> Example Object

<% json do %>
<%= print_json(data.objects['shift'], :verbose => true) %>
<% end %>

Shifts provide the basis for scheduling. Many other objects, including Locations, Positions, Sites, and Users, all link through Shifts.

For more information about how to use Shifts, visit the [Help Center](https://help.wheniwork.com/hc/en-us/sections/200287656-Using-the-Scheduler).

<%= print_table(data.objects['shift'], :header => :shift) %>

## Listing Shifts

> Example Request

```shell
curl <%=@api_prefix%>/2/shifts/?location_id=1&start=2014-03-05 00:00:00&end=2014-03-08 23:59:59 \
 -H "W-Token: <%=@wiw_token%>"
```
```php
<?php
$wiw = new Wheniwork("<%=@wiw_token%>");
$result = $wiw->get("shifts", array(
                                "location_id" => 1,
                                "start" => "2014-03-05 00:00:00",
                                "end" => "2014-03-08 23:59:59"
                              ));
?>
```

> Example Response

<% json do %>
{
  "start": "Wed, 05 Mar 2014 00:00:00 -0600",
  "end": "Sat, 08 Mar 2014 23:59:59 -0600",
  "shifts": [
    <%= print_json(data.objects['shift']) %>,
    <%= print_json(data.objects['shift'], :include=>{
      'id' => 27384,
      'start_time' => 'Sat, 08 Mar 2014 09:00:00 -0600',
      'end_time' => 'Sat, 08 Mar 2014 17:00:00 -0600'
    }) %>
  ]
}
<% end %>

This method allows you to search for shifts. See the parameters below for all the options.

<% aside do %>
**The maximum range between `start` and `end` is 90 days.** Any range greater than this will be set to the start time plus 90 days.
<% end %>

### HTTP Request
`GET <%=@api_prefix%>/2/shifts`

### Parameters

Key | Description
--- | -----------
<% param "start", "datetime" do %>Start time for the search window. The default is the current date and time.<% end %>
<% param "end", "datetime" do %>End time for the search window. The default is exactly three days from the start time.<% end %>
<% param "user_id", "integer, string array" do %>The ID of the user to get shifts for. For multiple users, enter a list of user IDs separated by commas (e.g. `1,5,3`).<% end %>
<% param "location_id", "integer, string array" do %>The ID of the location to get shifts for. For multiple locations, enter a list of location IDs separated by commas.<% end %>
<% param "include_open", "boolean" do %>Whether to include OpenShifts in the results.<% end %>
<% param "include_allopen", "boolean" do %>Whether to include OpenShifts in the results, including shifts that might be conflicts.<% end %>
<% param "include_onlyopen", "boolean" do %>Whether only OpenShifts should be included in the results.<% end %>
<% param "unpublished", "boolean" do %>Whether unpublished shifts should be included in the results.<% end %>
<% param "deleted", "boolean" do %>Whether to include a list of deleted shift IDs in the results.<% end %>

<% aside do %>
OpenShifts will be included in the results as long as either `include_allopen` or `include_onlyopen` is `true`.
<% end %>

## Get Existing Shift

> Example Request

```shell
curl <%=@api_prefix%>/2/shifts/1337 \
 -H "W-Token: <%=@wiw_token%>"
```
```php
<?php
$wiw = new Wheniwork("<%=@wiw_token%>");
$result = $wiw->get("shifts/1337");
?>
```

> Example Response

<% json do %>
{
  "shift": <%= print_json(data.objects['shift'], :include => {
    :id => 1337,
    :notes => "Come in early today."
  }) %>
}
<% end %>

Gets the details of an existing shift.

### HTTP Request
`GET <%=@api_prefix%>/2/shifts/{id}`

### Parameters

Key | Description
--- | -----------
<% param "id", "integer" do %>The ID of the shift requested.<% end %>



## Create/Update Shift

> Example Request

```shell
# Create a shift
curl -X POST https://api.wheniwork.com/2/shifts/ \
 --data '{"notes": "Come in early today."}' \
 -H "W-Token: <%=@wiw_token%>"

# Update a shift
curl -X PUT https://api.wheniwork.com/2/shifts/10000 \
 --data '{"notes": "Come in early today."}' \
 -H "W-Token: <%=@wiw_token%>"
```
```php
<?php
$wiw = new Wheniwork("<%=@wiw_token%>");

// Create a shift
$result = $wiw->create("shifts", array(...));

// Update a shift
$result = $wiw->update("shifts/10000", array(...));
?>
```

> Example Response

<% json do %>
{
  "shift": <%= print_json(data.objects['shift'], :include => {
    :notes=>"Come in early today."
  }) %>
}
<% end %>

Creates a new shift or updates an existing one.

### Create HTTP Request
`POST <%=@api_prefix%>/2/shifts/`

### Update HTTP Requests
`PUT <%=@api_prefix%>/2/shifts/{id}`

### Post/Put Body

The `POST` or `PUT` body can include fields from the [Shift Object](#shifts).


## Acknowledge Shifts

> Example Request

```shell
curl -X POST <%=@api_prefix%>/2/shifts/acknowledge/ \
 --data '{"ids":[34542,45434], "before":"Sun, 6 Dec 2015 00:00:00 -0600"}' \
 -H "W-Token: <%=@wiw_token%>"
```
```php
<?php
$wiw = new Wheniwork("<%=@wiw_token%>");
$result = $wiw->post("shifts/acknowledge/", array(
  "ids" => array(
    34542,
    45434
  ),
  "before" => "Sun, 6 Dec 2015 00:00:00 -0600"
));
?>
```

> Example Response

<% json do %>
{
  "success": true,
  "acknowledged": 2
}
<% end %>

This method allows you to acknowledge a group of shifts.

### HTTP Request
`POST <%=@api_prefix%>/2/shifts/acknowledge/`

### Parameters

Key | Description
--- | -----------
<% param "ids", "integer array" do %>The IDs of the shifts to acknowledge. This parameter must be in the POST body.<% end %>
<% param "before", "string" do %>The timestamp that represents when the shift data was last fetched from the server. This is optional, and is useful to protect against inadvertently acknowledging shifts that were updated since data was fetched.<% end %>

## Get Shift History

> Example Request

```shell
curl <%=@api_prefix%>/2/shifts/1337/history \
 -H "W-Token: <%=@wiw_token%>"
```
```php
<?php
$wiw = new Wheniwork("<%=@wiw_token%>");
$result = $wiw->get("shifts/1337/history");
?>
```

> Example Response

<% json do %>
{
  "shift": <%= print_json(data.objects['shift'], :include => {
    :id => 1337,
    :notes => "Come in early today."
  }) %>,
  "history": [
    <%= print_json(data.objects['shifthistory'], :include=>{
      'type' => 'created',
    }) %>,
    <%= print_json(data.objects['shifthistory'], :include=>{
      'type' => 'time_changed',
    }) %>,
    <%= print_json(data.objects['shifthistory'], :include=>{
      'type' => 'time_changed',
    }) %>
  ]
}
<% end %>

Gets the history of an existing shift. Shift history events are created when one
or more of the following elements are changed:

* start_time
* end_time
* user_id
* position_id
* location_id
* site_id
* published
* break_time
* acknowledged_at

History events contain `actor` and `at` fields, and can also contain one or more
of the following optional fields depending on event type:

* start
* end
* user
* break

There is one special event called "current" that includes the current state of
the shift.

### HTTP Request
`GET <%=@api_prefix%>/2/shifts/{id}/history`

### Parameters

Key | Description
--- | -----------
<% param "id", "integer" do %>The ID of the shift for which to fetch history.<% end %>


## Publish/Unpublish Shifts

> Example Request

```shell
curl -X POST <%=@api_prefix%>/2/shifts/publish/ \
 --data '{"ids":[1534,3543,65554,33444]}' \
 -H "W-Token: <%=@wiw_token%>"
```
```php
<?php
$wiw = new Wheniwork("<%=@wiw_token%>");
$result = $wiw->post("shifts/publish/", array(
  "ids" => array(
    1534,
    3543,
    65554,
    33444
  )
));
?>
```

> Example Response

<% json do %>
{
  "success": true
}
<% end %>

These methods allow you to publish or unpublish a group of shifts.

### HTTP Request
`POST <%=@api_prefix%>/2/shifts/publish/`

### HTTP Request
`POST <%=@api_prefix%>/2/shifts/unpublish/`


### Parameters

Key | Description
--- | -----------
<% param "ids", "integer array" do %>The IDs of the shifts to publish or unpublish. This parameter must be in the POST body.<% end %>



## Notify Shifts

> Example Request

```shell
curl -X POST <%=@api_prefix%>/2/shifts/notify/ \
 --data '{"start":"2014-05-16 00:00:00", "end":"2014-05-19 23:59:59"}' \
 -H "W-Token: <%=@wiw_token%>"
```
```php
<?php
$wiw = new Wheniwork("<%=@wiw_token%>");
$result = $wiw->post("shifts/notify/", array(
  "start" => "2014-05-16 00:00:00",
  "end" => "2014-05-19 23:59:59"
));
?>
```

> Example Response

<% json do %>
{
  "success": true,
  "email": 12,
  "sms": 4
}
<% end %>

This method allows you to notify users about new or updated shifts within a specific window.

### HTTP Request
`POST <%=@api_prefix%>/2/shifts/notify/`

### Parameters

Key | Description
--- | -----------
<% param "start", "datetime" do %>Start time for the notification window.<% end %>
<% param "end", "datetime" do %>End time for the notification window.<% end %>
<% param "user_id", "integer, integer array" do %>The ID of the user to notify. For multiple users, enter an array of user IDs (e.g. `[1,5,3]`).<% end %>
<% param "location_id", "integer, integer array" do %>The ID of the location to send notifications for. For multiple locations, enter an array of location IDs.<% end %>
<% param "site_id", "integer, integer array" do %>The ID of the site to send notifications for. For multiple sites, enter an array of site IDs.<% end %>
<% param "position_id", "integer, integer array" do %>The ID of the position to send notifications for. For multiple position, enter an array of position IDs.<% end %>

> Example Request

```shell
curl -X POST <%=@api_prefix%>/2/shifts/notify/47433 \
 -H "W-Token: <%=@wiw_token%>"
```
```php
<?php
$wiw = new Wheniwork("<%=@wiw_token%>");
$result = $wiw->post("shifts/notify/47433");
?>
```

> Example Response

<% json do %>
{
  "success": true,
  "email": 1,
  "sms": 0
}
<% end %>

You can also send a notification about just one shift using the following:

### HTTP Request
`POST <%=@api_prefix%>/2/shifts/notify/{id}`

### Parameters

Key | Description
--- | -----------
<% param "id", "integer" do %>ID of the shift you want to send notifications about.<% end %>

## Copy Shifts

> Example Request

```shell
curl -X POST <%=@api_prefix%>/2/shifts/copy/ \
 --data '{
     "target_start":"Sun, 27 Dec 2015 00:00:00 -0600",
     "target_end":"Sat, 02 Jan 2016 23:59:59 -0600",
     "location_id":4267,
     "mode":"previous_week",
     "conflicts":"avoid"
 }' \
 -H "W-Token: <%=@wiw_token%>"
```
```php
<?php
$wiw = new Wheniwork("<%=@wiw_token%>");
$result = $wiw->post("shifts/copy/", array(
  "target_start" => "Sun, 27 Dec 2015 00:00:00 -0600",
  "target_end" => "Sat, 02 Jan 2016 23:59:59 -0600",
  "location_id" => 4267,
  "mode" => "previous_week",
  "conflicts":"avoid"
));
?>
```

> Example Response

<% json do %>
{
  "confirmation": "3 shifts were copied.",
  "warning": "",
  "shifts": [
  <%= print_json(data.objects['shift'], :include=>{
    'id' => 27384,
    'start_time' => 'Mon, 28 Dec 2015 08:00:00 -0600',
    'end_time' => 'Mon, 28 Dec 2015 16:00:00 -0600',
    'user_id' => 528479
  }) %>,
  <%= print_json(data.objects['shift'], :include=>{
    'id' => 27385,
    'start_time' => 'Tue, 29 Dec 2015 08:00:00 -0600',
    'end_time' => 'Tue, 29 Dec 2015 16:00:00 -0600',
    'user_id' => 845179
  }) %>,
  <%= print_json(data.objects['shift'], :include=>{
    'id' => 27386,
    'start_time' => 'Wed, 30 Dec 2015 08:00:00 -0600',
    'end_time' => 'Wed, 30 Dec 2015 16:00:00 -0600',
    'user_id' => 528479
  }) %>
  ]
}
<% end %>

This method allows you to copy shifts from one timeframe into another. There are
two modes of operation, one that will copy the previous day's shifts, and another
that will copy the previous week's shifts.

There are 3 strategies to address shift conflicts that might arise from the
copy operation. The "conflicts" parameter accepts values of "overwrite", "allow",
and "avoid". "Overwrite" will delete any previously existing shift that would have
created a conflict with the newly copied shift. "Allow" will keep any conflicting
shifts that result from the copy. "Avoid" will create newly copied shifts as
OpenShifts that otherwise would have created a conflict with previously existing shifts.

The newly created shifts resulting from the copy are included in the response.

### HTTP Request
`POST <%=@api_prefix%>/2/shifts/copy/`

### Parameters

Key | Description
--- | -----------
<% param "target_start", "datetime" do %>Start time for time range into which shifts will be copied. Required.<% end %>
<% param "target_end", "datetime" do %>End time for time range into which shifts will be copied. Required.<% end %>
<% param "mode", "string" do %>"previous_week" or "previous_day" Indicates whether the source timerange is the week or day previous to the destination range. Required<% end %>
<% param "location_id", "integer, integer array" do %>The ID(s) of the Location(s) for which shifts will be copied. Required.<% end %>
<% param "user_id", "integer, integer array" do %>The ID(s) of the User(s) for which shifts will be copied. Optional.<% end %>
<% param "site_id", "integer, integer array" do %>The ID(s) of the Site(s) for which shifts will be copied. Optional, defaults to all sites.<% end %>
<% param "position_id", "integer, integer array" do %>The ID(s) of the Position(s) for which shifts will be copied. Optional, defaults to all positions.<% end %>
<% param "conflicts", "string" do %>The strategy for addressing shift conflicts resulting from the copy. Accepts: "overwrite", "allow", or "avoid". Documented above.<% end %>


## Delete Shift

> Example Request

```shell
curl -X DELETE <%=@api_prefix%>/2/shifts/1337 \
 -H "W-Token: <%=@wiw_token%>"
```
```php
<?php
$wiw = new Wheniwork("<%=@wiw_token%>");
$result = $wiw->delete("shifts/1337");
?>
```

> Example Response

<% json do %>
{
  "success": true
}
<% end %>

Deletes an existing shift.

### HTTP Request
`DELETE <%=@api_prefix%>/2/shifts/{id}`

### Parameters

Key | Description
--- | -----------
<% param "id", "integer" do %>ID of the shift to delete.<% end %>
<% param "ids", "integer array" do %>Array of IDs of the shifts to delete.<% end %>

<% aside do %>
If the `id` parameter is present, it will take precedence over `ids`.
<% end %>


## Get Labor

> Example Request

```shell
curl <%=@api_prefix%>/2/shifts/labor?start=2016-07-04&end=2016-07-08 \
 -H "W-Token: <%=@wiw_token%>"
```
```php
<?php
$wiw = new Wheniwork("<%=@wiw_token%>");
$result = $wiw->get("shifts/labor", array(
  "start" => "2016-07-04",
  "end" => "2016-07-08",
));
?>
```

> Example Response

<% json do %>
{
  "count": 8,
  "data": {
    "2016-07-04": <%= print_json(data.objects['labor data'], :verbose => true) %>,
    "2016-07-05": <%= print_json(data.objects['labor data']) %>,
    "2016-07-06": <%= print_json(data.objects['labor data']) %>,
    "2016-07-07": <%= print_json(data.objects['labor data']) %>
  }
}
<% end %>

Gets labor information from the schedule, such as total hours worked per day, labor cost, and coverage.

<% aside do %>
This endpoint can only retrieve statistics for at most one week at a time. Attempting to use a span of time longer than one week will result in an error.
<% end %>

### Parameters

Key | Description
--- | -----------
<% param "start", "datetime" do %>The start time of the range to calculate labor stats for.<% end %>
<% param "end", "datetime" do %>The end time of the range to calculate labor stats for.<% end %>

### Response Data

Key | Description
--- | -----------
<% param "count", "integer" do %>The total number of shifts contributing to the result.<% end %>
<% param "data", "object" do %>A JSON object containing labor data objects, indexed by date. Dates are formatted as YYYY-MM-DD ([ISO 8601](https://xkcd.com/1179/)).<% end %>

<%= print_table(data.objects['labor data'], :header => 'labor data') %>

<% aside do %>
Note that the sum of all the values in `coverage` may not add up to the value of `hours`. This is because `hours` takes unpaid breaks into account, which do not affect overall shift coverage.
<% end %>

## Counting Shifts

> Example Request

```shell
curl <%=@api_prefix%>/2/shifts/count?location_id=1&start=2014-03-05 00:00:00&end=2014-03-08 23:59:59 \
 -H "W-Token: <%=@wiw_token%>"
```
```php
<?php
$wiw = new Wheniwork("<%=@wiw_token%>");
$result = $wiw->get("shifts/count", array(
                                "location_id" => 1,
                                "start" => "2014-03-05 00:00:00",
                                "end" => "2014-03-08 23:59:59"
                              ));
?>
```

> Example Response

<% json do %>
{
    "shifts":17,
    "locations":1,
    "users":8,
    "positions":3,
    "sites":0
}
<% end %>

This method allows you to count shifts as well as their associated locations, users, positions, and sites. The accepted parameters are identical to the <a href="/#listing-shifts">list shifts</a> endpoint. See the parameters below for all the options.

<% aside do %>
**The maximum range between `start` and `end` is 90 days.** Any range greater than this will be set to the start time plus 90 days.
<% end %>

### HTTP Request
`GET <%=@api_prefix%>/2/shifts/count`

### Parameters

Key | Description
--- | -----------
<% param "start", "datetime" do %>Start time for the search window. The default is the current date and time.<% end %>
<% param "end", "datetime" do %>End time for the search window. The default is exactly three days from the start time.<% end %>
<% param "user_id", "integer, string array" do %>The ID of the user to get shifts for. For multiple users, enter a list of user IDs separated by commas (e.g. `1,5,3`).<% end %>
<% param "location_id", "integer, string array" do %>The ID of the location to get shifts for. For multiple locations, enter a list of location IDs separated by commas.<% end %>
<% param "include_open", "boolean" do %>Whether to include OpenShifts in the results.<% end %>
<% param "include_allopen", "boolean" do %>Whether to include OpenShifts in the results, including shifts that might be conflicts.<% end %>
<% param "include_onlyopen", "boolean" do %>Whether only OpenShifts should be included in the results.<% end %>
<% param "unpublished", "boolean" do %>Whether unpublished shifts should be included in the results.<% end %>

<% aside do %>
OpenShifts will be included in the results as long as either `include_allopen` or `include_onlyopen` is `true`.
<% end %>
